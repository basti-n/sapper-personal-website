!function(){"use strict";const e=["client/HighlightText.24738de2.js","client/Summary-Bar.1186cdb4.js","client/Milestone-Synopsis.8aab5b2d.js","client/index.d311eeb9.js","client/projects.d4ffedaf.js","client/index.db5b2404.js","client/blog.b252e9d0.js","client/client.e46daba5.js","client/stack.970f4780.js","client/client.623784a1.js"].concat(["service-worker-index.html","content/cv.json","favicon.png","global.css","images/blog.svg","images/codepen-active.svg","images/codepen.svg","images/github-active.svg","images/github.svg","images/linkedin-active.svg","images/linkedin.svg","images/pm-to-dev.svg","images/portfolio.svg","images/projects/Bootstrap_1.png","images/projects/Bootstrap_2.png","images/projects/Card_1.png","images/projects/Card_2.png","images/projects/StravaScript_1.png","images/projects/StravaScript_2.png","images/projects/ToDo_1.png","images/projects/ToDo_2.png","images/stack.jpg","images/technologies/angular.svg","images/technologies/bootstrap.svg","images/technologies/css.svg","images/technologies/deno.svg","images/technologies/html.svg","images/technologies/js.svg","images/technologies/mongo.svg","images/technologies/ngrx.svg","images/technologies/node.svg","images/technologies/postgresql.svg","images/technologies/react.svg","images/technologies/rxjs.svg","images/technologies/sapper.svg","images/technologies/svelte.svg","images/technologies/typescript.svg","images/technologies/vue.svg","images/value-creation.svg","logo-192.png","logo-512.png","manifest.json"]),s=new Set(e);self.addEventListener("install",s=>{s.waitUntil(caches.open("cache1597759139857").then(s=>s.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const s of e)"cache1597759139857"!==s&&await caches.delete(s);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const t=new URL(e.request.url);t.protocol.startsWith("http")&&(t.hostname===self.location.hostname&&t.port!==self.location.port||(t.host===self.location.host&&s.has(t.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1597759139857").then(async s=>{try{const t=await fetch(e.request);return s.put(e.request,t.clone()),t}catch(t){const i=await s.match(e.request);if(i)return i;throw t}}))))})}();
